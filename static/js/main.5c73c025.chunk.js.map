{"version":3,"sources":["components/search-weather/searchWeather.js","components/show-weather/show-weather.js","components/fav-cities-list/fav-cities-list.js","App.js","index.js"],"names":["SearchWeather","props","state","text","onValueChange","bind","onSubmit","e","this","setState","target","value","preventDefault","onSearch","onChange","onClick","Component","ShowWeather","weather","addFav","date","main","className","name","sys","country","size","Math","round","temp","FavList","favourites","map","item","index","removeFav","App","city","JSON","parse","localStorage","getItem","search","currentDate","setCurrentCity","api","fetch","then","res","json","result","cities","indexOf","push","setItem","stringify","newArr","slice","data","day","getDay","getDate","month","getMonth","year","getFullYear","Date","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c73c025.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class SearchWeather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\"\r\n        };\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onValueChange(e) {\r\n        this.setState({\r\n            text: e.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onSearch(this.state.text);\r\n        this.setState({\r\n            text: \"\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <input onChange={this.onValueChange} value={this.state.text} />\r\n                <button onClick={this.onSubmit}>Показать</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nexport default class ShowWeather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const { weather, addFav, date } = this.props;\r\n        return weather.main ? (\r\n            <div className=\"result-container\">\r\n                <div className=\"location-container\">\r\n                    <div className=\"location\">\r\n                        {weather.name}, {weather.sys.country}\r\n                    </div>\r\n                    <div className=\"date\">{date}</div>\r\n                    <button size=\"large\" onClick={() => addFav(weather.name)}>\r\n                        Добавить в изранное\r\n                    </button>\r\n                </div>\r\n                <div className=\"weather-container\">\r\n                    <div className=\"temperature\">{Math.round(weather.main.temp)}°C</div>\r\n                </div>\r\n            </div>\r\n        ) : (\r\n            \"\"\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nexport default class FavList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        const favourites = this.props.favourites.map((item, index) => {\r\n            return (\r\n                <li key={index}>\r\n                    <span className=\"favouriteCity\" onClick={() => this.props.onSearch(item)}>\r\n                        {item}\r\n                    </span>\r\n                    <button size=\"large\" onClick={() => this.props.removeFav(index)}>\r\n                        Удалить\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        return <div className=\"favourites\">{favourites}</div>;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport SearchWeather from \"./components/search-weather/searchWeather\";\r\nimport ShowWeather from \"./components/show-weather/show-weather\";\r\nimport FavList from \"./components/fav-cities-list/fav-cities-list\";\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            city: \"\",\r\n            country: \"\",\r\n            weather: \"\",\r\n            favourites: JSON.parse(localStorage.getItem(\"cities\")) || [] //получаем список избранных городов. Если его нет, присваиваем пустой массив\r\n        };\r\n        this.search = this.search.bind(this);\r\n        this.addFav = this.addFav.bind(this);\r\n        this.currentDate = this.currentDate.bind(this);\r\n        this.removeFav = this.removeFav.bind(this);\r\n        this.setCurrentCity = this.removeFav.bind(this);\r\n    }\r\n\r\n    search(city) {\r\n        const api = {\r\n            key: \"a8c07f8a8d80fb52a4794b2fe34b7671\",\r\n            base: \"https://api.openweathermap.org/data/2.5/\"\r\n        };\r\n\r\n        fetch(`${api.base}weather?q=${city}&units=metric&APPID=${api.key}`)\r\n            .then((res) => res.json())\r\n            .then((result) => {\r\n                this.setState({ weather: result });\r\n                this.setState({ city: \"\" });\r\n            });\r\n    }\r\n\r\n    setCurrentCity() {}\r\n\r\n    componentDidMount() {\r\n        this.search(\"Saint Petersburg\");\r\n    }\r\n\r\n    addFav(city) {\r\n        if (localStorage.getItem(\"cities\")) {\r\n            let cities = JSON.parse(localStorage.getItem(\"cities\"));\r\n            // Проверяем, есть ли такой город в избранном\r\n            if (cities.indexOf(city) < 0) {\r\n                cities.push(city); //если нет, добавляем\r\n                localStorage.setItem(\"cities\", JSON.stringify(cities));\r\n                this.setState({ favourites: cities });\r\n            }\r\n        } else {\r\n            let cities = [city];\r\n            localStorage.setItem(\"cities\", JSON.stringify(cities));\r\n            this.setState({ favourites: cities });\r\n        }\r\n    }\r\n\r\n    removeFav(index) {\r\n        this.setState(({ favourites }) => {\r\n            const newArr = [...favourites.slice(0, index), ...favourites.slice(index + 1)]; //создаем новый массив без элемента с нужным индексом\r\n            localStorage.setItem(\"cities\", JSON.stringify(newArr)); //перезаписываем новый массив в localStorage\r\n\r\n            return {\r\n                favourites: newArr\r\n            };\r\n        });\r\n    }\r\n\r\n    //Конвертация текущей даты\r\n    currentDate(data) {\r\n        const months = [\r\n            \"Январь\",\r\n            \"Февраль\",\r\n            \"Март\",\r\n            \"Апрель\",\r\n            \"Май\",\r\n            \"Июнь\",\r\n            \"Июль\",\r\n            \"Август\",\r\n            \"Сентябрь\",\r\n            \"Октябрь\",\r\n            \"Ноябрь\",\r\n            \"Декабрь\"\r\n        ];\r\n        const days = [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"];\r\n\r\n        const day = days[data.getDay()];\r\n        const date = data.getDate();\r\n        const month = months[data.getMonth()];\r\n        const year = data.getFullYear();\r\n\r\n        return `${day} ${date} ${month} ${year}`;\r\n    }\r\n\r\n    render() {\r\n        const { city, weather, country, favourites } = this.state;\r\n        return (\r\n            <div className=\"app\">\r\n                <main>\r\n                    <SearchWeather onSearch={this.search} />\r\n\r\n                    <ShowWeather\r\n                        addFav={this.addFav}\r\n                        weather={weather}\r\n                        city={city}\r\n                        country={country}\r\n                        date={this.currentDate(new Date())}\r\n                    />\r\n                    <FavList favourites={favourites} removeFav={this.removeFav} onSearch={this.search} />\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}